class Queue
{
    field Array tail;
    field int length;
   
    constructor Queue new(int headX, int headY) 
    {
        let tail = Array.new(1);
        let tail[0] = Point.new(headX, headY + 16);
        let length = 1;
        return this;
    }

    method void dispose()
    {
       do tail.dispose();
       do Memory.deAlloc(this);
       return;
    }

    method int Length() {return length;}
   
    method void addToStart(Point point) 
    {
        var int i;
        var Array newTail;
        let newTail = Array.new(length+1);
        let newTail[0] = point;
        
        let i = 0;
        while (i<length)
        {
            let newTail[i+1] = tail[i];
            let i = i + 1;
        }
        do tail.dispose();
        let tail = newTail;

        let length = length + 1;
        return;
    }

    method Point removeFromEnd() 
    {
        var int i;
        var Array newTail;
        var Point retPoint;
        let newTail = Array.new(length-1);
        
        let i = 0;
        while (i<(length-1))
        {
            let newTail[i] = tail[i];
            let i = i + 1;
        }
        let retPoint = tail[length-1];
        do tail.dispose();
        let tail = newTail;
        let length = length - 1;
        return retPoint;
    }

    method bool containTail(Point point) 
    {
        var int i;
        var Point tailElem;
        let i = 0;
        while (i<length)
        {
            let tailElem = tail[i];
            if ((point.GetX() = tailElem.GetX()) & (point.GetY() = tailElem.GetY())) {return true;}
            let i = i + 1;
        }
        return false;
    }

    method Point GiveFirstElement() 
    {
        var Point p;
        let p = tail[0];
        return p;
    }
}